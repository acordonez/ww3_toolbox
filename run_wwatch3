#!/bin/bash
#
# Global test case for grid gx1v6 and gx3v7
#
# Qing Li, 20170613


# setting

# case name
gridtype="gx37"  # grid type: gx16 or gx37 or ww3a
casename="test_ser_${gridtype}"

# run times
t_beg="20090101 000000"  # first output
t_end="20090102 000000"  # last output
dt="3600"                # output interval
dtrs="21600"             # restart interval

# run ww3 in MPI mode
f_mpi="yes"
# number of processors
nproc=4
# wall time (hh:mm)
walltime="0:15"

# Set switch
case_switch_ser="F90 NOGRB NOPA LRB4 SHRD PR3 UQ FLX2 LN1 ST2 STAB2 NL1 BT1 DB1 MLIM TR0 BS0 IC0 IS0 REF0 XX0 WNT1 WNX1 CRT1 CRX1 O0 O1 O2 O3 O4 O5 O6 O7 O11 O14 NC4"
case_switch_mpi="F90 NOGRB NOPA LRB4 MPI DIST NC4 PR3 UQ FLX2 LN1 ST2 STAB2 NL1 BT1 DB1 MLIM TR0 BS0 IC0 IS0 REF0 XX0 WNT1 WNX1 CRT1 CRX1 O0 O1 O2 O3 O4 O5 O6 O7 O11 O14 NC4"

# specify compiler string (as per in ww3_dir/bin options) here:
compstr="Intel"

# ww3 dir
ww3_dir="/glade/u/home/qingli/wwatch3_v5.16"
tmp_dir="/glade/scratch/qingli/wwatch3v5p16"
toolbox_dir="/glade/u/home/qingli/src/ww3_toolbox"

# set environment
export WWATCH3_NETCDF="NC4"
export NETCDF_CONFIG="/glade/apps/opt/netcdf/4.3.0/intel/12.1.5/bin/nc-config"
export WWATCH3_ENV="${ww3_dir}/wwatch3.env"

## 0. Preprocessing
# calculate the output file number
#y_beg=${t_beg:0:4}
#y_end=${t_end:0:4}
#m_beg=${t_beg:4:2}
#m_end=${t_end:4:2}
#d_beg=${t_beg:6:2}
#d_end=${t_end:6:2}
#nday=$((${y_end}))
nday=1
nfile=$((${nday}*86400/${dt}))
# spatial dimensions
if [ "${gridtype}" == "gx37" ]; then
	nx=100
	ny=116
elif [ "${gridtype}" == "gx16" ]; then
	nx=320
	ny=384
elif [ "${gridtype}" == "ww3a" ]; then
	nx=90
	ny=50
else
	echo "Grid type ${gridtype} not supported"
	exit 1
fi

# set path
path_e="${ww3_dir}/exe"          # path for executables
path_b="${ww3_dir}/bin"          # path for binaries
path_a="${ww3_dir}/aux"          # path for aux files and scripts
path_w="${tmp_dir}/${casename}"  # work directory
path_o="${path_w}/out"           # output directory

# setup work directory
mkdir -p ${path_w}
cd ${path_w}

# output directory
mkdir -p ${path_o}

cp ${path_b}/comp.${compstr} ${path_b}/comp
cp ${path_b}/link.${compstr} ${path_b}/link

# new case
${path_b}/w3_clean all
${path_b}/w3_new

## 1. Grid pre-processor ------------------------------------------------------
echo " "
echo " +-------------------+"
echo " | Grid preprocessor |"
echo " +-------------------+"
echo " "

# compile appropriate code 
echo ${case_switch_ser} > ${path_b}/switch
${path_b}/w3_make ww3_grid

rm -f mod_def.*
path_grid="${toolbox_dir}/grid_inp"
cp ${path_grid}/${gridtype}_bottom.inp ./
cp ${path_grid}/${gridtype}_mapsta.inp ./
if [ "${gridtype}" != "ww3a" ]; then
	cp ${path_grid}/${gridtype}_x.inp ./
	cp ${path_grid}/${gridtype}_y.inp ./
fi
cp ${path_grid}/ww3_grid.inp.${gridtype} ./ww3_grid.inp

echo "  Screen output routed to ${path_o}/ww3_grid.out"
${path_e}/ww3_grid > ${path_o}/ww3_grid.out
mkdir -p grid_inp
mv ${gridtype}_bottom.inp ${gridtype}_mapsta.inp ${gridtype}_x.inp ${gridtype}_y.inp ww3_grid.inp ${path_w}/grid_inp

## 2. Initial conditions ------------------------------------------------------
echo " "
echo " +--------------------+"
echo " | Initial conditions |"
echo " +--------------------+"
echo " "

# compile appropriate code 
echo ${case_switch_ser} > ${path_b}/switch
${path_b}/w3_make ww3_strt
path_strt="${toolbox_dir}/strt_inp"
cp ${path_strt}/ww3_strt.inp ./

echo "  Screen output routed to ${path_o}/ww3_strt.out"
${path_e}/ww3_strt > ${path_o}/ww3_strt.out
mkdir -p strt_inp
mv ww3_strt.inp strt_inp/

## 3. Input fields ------------------------------------------------------------
echo " "
echo " +--------------+"
echo " | Input fields |"
echo " +--------------+"
echo " "

# compile appropriate code 
echo ${case_switch_ser} > ${path_b}/switch
${path_b}/w3_make ww3_prnc
path_prnc="${toolbox_dir}/prnc_inp"

# prepare input fields

# wind
cp ${path_prnc}/wind.nc ./
cp ${path_prnc}/ww3_prnc.inp.wind ./ww3_prnc.inp
echo "  Screen output routed to ${path_o}/ww3_prnc_wind.out"
${path_e}/ww3_prnc > ${path_o}/ww3_prnc_wind.out
mkdir -p prnc_inp
mv ww3_prnc.inp prnc_inp/ww3_prnc_wind.inp
mv wind.nc prnc_inp/

# ice
cp ${path_prnc}/ice.nc ./
cp ${path_prnc}/ww3_prnc.inp.ice ./ww3_prnc.inp
echo "  Screen output routed to ${path_o}/ww3_prnc_ice.out"
${path_e}/ww3_prnc > ${path_o}/ww3_prnc_ice.out
mv ww3_prnc.inp prnc_inp/ww3_prnc_ice.inp
mv ice.nc prnc_inp/

## 4. Main program ------------------------------------------------------------
echo " "
echo " +--------------+"
echo " | Main program |"
echo " +--------------+"
echo " "

# compile appropriate code
if [ "${f_mpi}" == "yes" ]; then
	echo ${case_switch_mpi} > ${path_b}/switch
else
	echo ${case_switch_ser} > ${path_b}/switch
fi
${path_b}/w3_make ww3_shel

path_shel="${toolbox_dir}/shel_inp"
cp ${path_shel}/ww3_shel.inp ./ww3_shel.inp.tmp0
`sed "s/LB_STARTING_TIME/${t_beg}/g" ww3_shel.inp.tmp0 > ww3_shel.inp.tmp1`
`sed "s/LB_ENDING_TIME/${t_end}/g" ww3_shel.inp.tmp1 > ww3_shel.inp.tmp2`
`sed "s/LB_TIME_INT/${dt}/g" ww3_shel.inp.tmp2 > ww3_shel.inp.tmp3`
`sed "s/LB_TIME_RES/${dtrs}/g" ww3_shel.inp.tmp3 > ww3_shel.inp`
rm ww3_shel.inp.tmp?
mkdir -p shel_inp

## 5. Gridded NetCDF output post-processor ------------------------------------
echo " "
echo " +--------------------------------------+"
echo " | Gridded NetCDF output post-processor |"
echo " +--------------------------------------+"
echo " "

# compile appropriate code
echo ${case_switch_ser} > ${path_b}/switch
${path_b}/w3_make ww3_ounf
path_ounf="${toolbox_dir}/ounf_inp"
cp ${path_ounf}/ww3_ounf.inp ./ww3_ounf.inp.tmp0
`sed "s/LB_STARTING_TIME/${t_beg}/g" ww3_ounf.inp.tmp0 > ww3_ounf.inp.tmp1`
`sed "s/LB_TIME_INT/${dt}/g" ww3_ounf.inp.tmp1 > ww3_ounf.inp.tmp2`
`sed "s/LB_NFILE/${nfile}/g" ww3_ounf.inp.tmp2 > ww3_ounf.inp.tmp3`
`sed "s/LB_NX/${nx}/g" ww3_ounf.inp.tmp3 > ww3_ounf.inp.tmp4`
`sed "s/LB_NY/${ny}/g" ww3_ounf.inp.tmp4 > ww3_ounf.inp`
rm ww3_ounf.inp.tmp?
mkdir -p ounf_inp

## 6. Submitting job ----------------------------------------------------------
echo " "
echo " +----------------+"
echo " | Submitting job |"
echo " +----------------+"
echo " "

if [ "${f_mpi}" == "yes" ]; then
	echo "  Running WW3 with ${nproc} processors..."

cat > submit.sh << EOF
#BSUB -n ${nproc}
#BSUB -q small
#BSUB -R "span[ptile=15]"
#BSUB -N
#BSUB -W ${walltime}
#BSUB -x
#BSUB -J ${casename}
#BSUB -e ${casename}.err
#BSUB -o ${casename}.out
#BSUB -P UBRN0005

cd ${path_w}
mpirun -np ${nproc} ${path_e}/ww3_shel > ${path_o}/ww3_shel.out
echo "  Log files routed to ${path_o}"
mv log.* ${path_o}/
mv ww3_shel.inp shel_inp/

${path_e}/ww3_ounf > ${path_o}/ww3_ounf.out
mv ww3_ounf.inp ounf_inp/

EOF
	chmod 755 submit.sh
	bsub < submit.sh

else
	echo "  Running WW3 with single processor..."

cat > submit.sh << EOF	
#BSUB -n 1
#BSUB -q small
#BSUB -R "span[ptile=15]"
#BSUB -N
#BSUB -W ${walltime}
#BSUB -x
#BSUB -J ${casename}
#BSUB -e ${casename}.err
#BSUB -o ${casename}.out
#BSUB -P UBRN0005

cd ${path_w}
${path_e}/ww3_shel > ${path_o}/ww3_shel.out
echo "  Log files routed to ${path_o}"
mv log.* ${path_o}/
mv ww3_shel.inp shel_inp/

${path_e}/ww3_ounf > ${path_o}/ww3_ounf.out
mv ww3_ounf.inp ounf_inp/

EOF
	chmod 755 submit.sh
	bsub < submit.sh

fi


