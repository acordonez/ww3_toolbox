#!/usr/bin/env python
# This script generates netCDF input field files for
# ww3_prnc.inp
# 
#  Qing Li, 20170609

import sys
from netCDF4 import Dataset
import datetime

def main():
    """
    Read 6 hour u_10 and v_10 data and daily ifrac data,
    process the time dimension to respect Julian
    """
    #data_path = '/glade/u/home/qingli/ww3_data'
    data_path = '/Users/qingli/ww3_data'
    fname_u10 = 'ncep.u_10.T62.2009.20120412.nc'
    fname_v10 = 'ncep.v_10.T62.2009.20120412.nc'
    fname_ifrac = 'ssmi.ifrac.0.5x0.5.2009.20120420.nc'
    out_path = '.'

    # output time in days
    nday = 365
    ind0_wind = 0
    ind0_ice = 0
    ind1_wind = nday*4
    ind1_ice = nday

    ##########################
    # output file 1: wind.nc
    ##########################
    # input file
    fu10 = Dataset(data_path+'/'+fname_u10, 'r')
    time = fu10.variables['time']
    lon = fu10.variables['lon']
    lat = fu10.variables['lat']
    u10 = fu10.variables['u_10']
    fv10 = Dataset(data_path+'/'+fname_v10, 'r')
    v10 = fv10.variables['v_10']
    # output file
    fout_wind = Dataset(out_path+'/ncep_wind_2009.nc', 'w', format="NETCDF4")
    # dimensions
    nlon = lon.size
    nlat = lat.size
    fout_wind.createDimension('time', None)
    fout_wind.createDimension('lon', nlon)
    fout_wind.createDimension('lat', nlat)
    # variables
    # time
    vtime = fout_wind.createVariable('time', 'f4', ('time',), zlib=True)
    vtime.long_name = time.long_name
    vtime.units = time.units
    vtime.calendar = 'gregorian'
    vtime[:] = time[ind0_wind:ind1_wind]
    # longitude
    vlon = fout_wind.createVariable('lon', 'f4', ('lon',), zlib=True)
    vlon.long_name = lon.long_name
    vlon.units = lon.units
    vlon[:] = lon[:]
    # latitude
    vlat = fout_wind.createVariable('lat', 'f4', ('lat',), zlib=True)
    vlat.long_name = lat.long_name
    vlat.units = lat.units
    vlat[:] = lat[:]
    # u10
    vu10 = fout_wind.createVariable('u_10', 'f4', ('time', 'lat', 'lon'), zlib=True)
    vu10.long_name = u10.long_name
    vu10.units = u10.units
    vu10[:] = u10[ind0_wind:ind1_wind,:,:]
    # v10
    vv10 = fout_wind.createVariable('v_10', 'f4', ('time', 'lat', 'lon'), zlib=True)
    vv10.long_name = v10.long_name
    vv10.units = v10.units
    vv10[:] = v10[ind0_wind:ind1_wind,:,:]
    # global attributes
    fout_wind.note = '{} days 10-meter wind from {} and {}.\n'.format(nday, fname_u10, fname_v10)
    # close files
    fout_wind.close()
    fu10.close()
    fv10.close()

    ##########################
    # output file 2: ice.nc
    ##########################
    # input file
    fice = Dataset(data_path+'/'+fname_ifrac, 'r')
    time = fice.variables['time']
    tlon = fice.variables['tlon']
    tlat = fice.variables['tlat']
    ifrac = fice.variables['ifrac']
    # output file
    fout_ice = Dataset(out_path+'/ssmi_ice_2009.nc', 'w', format="NETCDF4")
    # dimensions
    nlon = fice.dimensions['nlon'].size
    nlat = fice.dimensions['nlat'].size
    fout_ice.createDimension('time', None)
    fout_ice.createDimension('lon', nlon)
    fout_ice.createDimension('lat', nlat)
    # variables
    # time
    vtime = fout_ice.createVariable('time', 'f4', ('time',), zlib=True)
    vtime.long_name = time.long_name
    vtime.units = time.units
    vtime.calendar = 'gregorian'
    vtime[:] = time[ind0_ice:ind1_ice]
    # longitude
    vlon = fout_ice.createVariable('lon', 'f4', ('lon',), zlib=True)
    vlon.long_name = 'longitude'
    vlon.units = tlon.units
    vlon[:] = tlon[0,:]
    # latitude
    vlat = fout_ice.createVariable('lat', 'f4', ('lat',), zlib=True)
    vlat.long_name = 'latitude'
    vlat.units = tlat.units
    vlat[:] = tlat[:,0]
    # ice fraction
    vice = fout_ice.createVariable('ifrac', 'f4', ('time', 'lat', 'lon'), zlib=True)
    vice.long_name = ifrac.long_name
    vice.missing_value = ifrac.missing_value
    vice[:] = ifrac[ind0_ice:ind1_ice,:,:]
    # global attributes
    fout_ice.note = '{} days ice fraction from {}.\n'.format(nday, fname_ifrac)
    # close files
    fout_ice.close()
    fice.close()

if __name__ == "__main__":
    main()
